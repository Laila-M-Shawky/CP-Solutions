/* ▄█▀██▄  ▄████▄     ██╗      █████╗ ██╗██╗      █████╗      ▄█▀██▄  ▄████▄▐█░████████████▌    ██║     ██╔══██╗██║██║     ██╔══██╗    ▐█░████████████▌ ██▒███████████     ██║     ███████║██║██║     ███████║     ██▒███████████  ▀██████████▀      ██║     ██╔══██║██║██║     ██╔══██║      ▀██████████▀     ▀████▀         ███████╗██║  ██║██║███████╗██║  ██║         ▀████▀       ▀▀           ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚═╝  ╚═╝           ▀▀Believe in yourself ,( try and try and then try ), You can do it =D ⡿⣡⣿⣿⡟⡼⡁⠁⣰⠂⡾⠉⢨⣿⠃⣿⡿⠍⣾⣟⢤⣿⢇⣿⢇⣿⣿⢿⣱⣿⣿⡟⡐⣰⣧⡷⣿⣴⣧⣤⣼⣯⢸⡿⠁⣰⠟⢀⣼⠏⣲⠏⢸⣿⡟⣿⣿⣿⡟⠁⠄⠟⣁⠄⢡⣿⣿⣿⣿⣿⣿⣦⣼⢟⢀⡼⠃⡹⠃⡀⢸⡿⢸⣿⣿⣿⠃⠄⢀⣾⠋⠓⢰⣿⣿⣿⣿⣿⣿⠿⣿⣿⣾⣅⢔⣕⡇⡇⡼⢁⣿⣿⣿⡟⠄⠄⣾⣇⠷⣢⣿⣿⣿⣿⣿⣿⣿⣭⣀⡈⠙⢿⣿⣿⡇⡧⢁⣾⣿⣿⣿⡇⠄⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⠇⠄⠄⢿⣿⡇⢡⣾⣿⣿⣿⣿⣷⢰⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⣧⣀⡄⢀⠘⡿⣰⣿⣿⣿⣿⣿⢹⣿⢸⣿⣿⠟⠻⢿⣿⣿⣿⣿⣿⣿⣿⣶⣭⣉⣤⣿⢈⣼⣿⣿⣿⣿⣿⣿⢸⠇⡜⣿⡟⠄⠄⠄⠈⠙⣿⣿⣿⣿⣿⣿⣿⣿⠟⣱⣻⣿⣿⣿⣿⣿⠟⠁⠄⣰⡗⠹⣿⣄⠄⠄⠄⢀⣿⣿⣿⣿⣿⣿⠟⣅⣥⣿⣿⣿⣿⠿⠋⠄⠄⣾⠜⠋⢠⣷⢻⣿⣿⣶⣾⣿⣿⣿⣿⠿⣛⣥⣾⣿⠿⠟⠛⠉⠄⠄   */ #include <bits/stdc++.h>#include <unordered_map>#define endl "\n"#define ceil(x, y) ((x + y - 1) / y)#define floor(x, y) (x / y)#define round(x, y) ((x + y / 2) / y)#define clr(arr, x) memset(arr, x, sizeof arr)#define all(v) v.begin(), v.end()#define allr(s) s.rbegin(), s.rend()#define rt(s) return cout << s, 0#define duplicateremove(v) v.erase(unique(v.begin(), v.end()), v.end()) // ٌRemoves only consecutive duplicates#define watch(x) cout << (#x) << " = " << x << endl#define sz(s) (int)(s.size())#define OO 0x3f3f3f3f3f3f3f3fLLconst int oo = 0x3f3f3f3f, mod = 1e9 + 7;using namespace std;typedef long long ll;typedef long double ld;typedef unsigned long long ull;int dx[]{1, -1, 0, 0, 1, 1, -1, -1};int dy[]{0, 0, 1, -1, 1, -1, 1, -1};void Statixia(){    // #ifndef ONLINE_JUDGE    // freopen("input.txt", "r", stdin);    // freopen("output.txt", "w", stdout);    // #endif    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);}ll gcd(ll a, ll b){    return b == 0 ? abs(a) : gcd(b, a % b);}ll lcm(ll a, ll b){    return a / gcd(a, b) * b;} // write your constraints here// todo Constraints:// todo// todo// todo string solve(){    // write your code here    string s;    int n;    cin >> n >> s;    if (s.size() > 5 || s.find('T') == string::npos || s.find('i') == string::npos || s.find('m') == string::npos || s.find('u') == string::npos || s.find('r') == string::npos)            return "NO";    return "YES";} int main(){    Statixia();    int t = 1;    cin >> t;    while (t--)    {        cout << solve() << endl;    }    return 0;}