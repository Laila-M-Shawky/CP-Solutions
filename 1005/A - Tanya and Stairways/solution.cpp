/*═▄█▀█▄══▄███▄═    ██╗      █████╗ ██╗██╗      █████╗     ═▄█▀█▄══▄███▄═      ▐█░██████████▌    ██║     ██╔══██╗██║██║     ██╔══██╗    ▐█░██████████▌      ═██▒█████████═    ██║     ███████║██║██║     ███████║    ═██▒█████████═      ══▀████████▀══    ██║     ██╔══██║██║██║     ██╔══██║    ══▀████████▀══      ════╔▀██▀╗════    ███████╗██║  ██║██║███████╗██║  ██║    ════╔▀██▀╗════    ╚════╝        ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚═╝  ╚═╝        ╚════╝   Believe in yourself ,( try and try and then try ), You can do it 8D ⡿⣡⣿⣿⡟⡼⡁⠁⣰⠂⡾⠉⢨⣿⠃⣿⡿⠍⣾⣟⢤⣿⢇⣿⢇⣿⣿⢿        ⣱⣿⣿⡟⡐⣰⣧⡷⣿⣴⣧⣤⣼⣯⢸⡿⠁⣰⠟⢀⣼⠏⣲⠏⢸⣿⡟⣿         ⣿⣿⡟⠁⠄⠟⣁⠄⢡⣿⣿⣿⣿⣿⣿⣦⣼⢟⢀⡼⠃⡹⠃⡀⢸⡿⢸⣿         ⣿⣿⠃⠄⢀⣾⠋⠓⢰⣿⣿⣿⣿⣿⣿⠿⣿⣿⣾⣅⢔⣕⡇⡇⡼⢁⣿⣿                 ⣿⡟⠄⠄⣾⣇⠷⣢⣿⣿⣿⣿⣿⣿⣿⣭⣀⡈⠙⢿⣿⣿⡇⡧⢁⣾⣿⣿           ⣿⡇⠄⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⠇⠄⠄⢿⣿⡇⢡⣾⣿⣿⣿           ⣿⣷⢰⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⣧⣀⡄⢀⠘⡿⣰⣿⣿⣿⣿⣿            ⢹⣿⢸⣿⣿⠟⠻⢿⣿⣿⣿⣿⣿⣿⣿⣶⣭⣉⣤⣿⢈⣼⣿⣿⣿⣿⣿⣿          ⢸⠇⡜⣿⡟⠄⠄⠄⠈⠙⣿⣿⣿⣿⣿⣿⣿⣿⠟⣱⣻⣿⣿⣿⣿⣿⠟⠁            ⠄⣰⡗⠹⣿⣄⠄⠄⠄⢀⣿⣿⣿⣿⣿⣿⠟⣅⣥⣿⣿⣿⣿⠿⠋⠄⠄⣾         ⠜⠋⢠⣷⢻⣿⣿⣶⣾⣿⣿⣿⣿⠿⣛⣥⣾⣿⠿⠟⠛⠉⠄⠄   */ #include<bits/stdc++.h>#include<unordered_map>#define endl "\n"#define ceil(x, y) ((x + y -1) / y)#define floor(x, y) (x / y)#define round(x, y) ((x + y / 2) / y)#define clr(arr, x) memset(arr, x, sizeof arr)#define all(v) v.begin(),v.end()#define allr(s) s.rbegin(),s.rend()#define rt(s) return cout<<s,0#define watch(x) cout<<(#x)<<" = "<<x<<endl#define sz(s) (int)(s.size())#define OO 0x3f3f3f3f3f3f3f3fLLconst int oo = 0x3f3f3f3f, mod = 1e9 + 7;using namespace std;typedef long long ll;typedef long double ld;typedef unsigned long long ull;int dx[] { 1, -1, 0, 0, 1, 1, -1, -1 };int dy[] { 0, 0, 1, -1, 1, -1, 1, -1 };void Statixia(){//#ifndef ONLINE_JUDGE//freopen("input.txt", "r", stdin);//freopen("output.txt", "w", stdout);//#endif  ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);}ll gcd(ll a, ll b) {    return b == 0 ? abs(a) : gcd(b, a % b);}ll lcm(ll a, ll b) {    return a / gcd(a, b) * b;} // write your constraints here//todo Constraints://todo n (1 ≤ n ≤ 1000)//todo ai (1≤ ai​ ≤ 1000)//todo  void solve(){    // write your code here    int n, freq[1001] = {}, counter = 0;    cin >> n;    vector<int> lol(n), stairs;    for(int i = 0; i < n; ++i)    {        cin >> lol[i];        freq[lol[i]]++;        if(i > 0 && lol[i] == 1)        {            stairs.push_back(counter);            counter = 1;            continue;        }        counter++;    }    stairs.push_back(counter);    cout << *max_element(freq, freq + 1001) << endl;    for(auto it : stairs)        cout << it << ' ';} int main(){    Statixia();    int t = 1;    //cin >> t;    while (t--)    {        solve();    }    return 0;}