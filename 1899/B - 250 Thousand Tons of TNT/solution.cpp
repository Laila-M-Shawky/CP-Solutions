/***   TRIAL 1 XXX */// // write your constraints here// //todo Constraints:// //todo 1 ≤ k ≤ n// //todo 1 ≤ n ≤ 150000// //todo 1 ≤ ai ≤ 10^9 // ll abs_diff(vector<ll> & v, ll k)// {//     ll left = 0, right = 0;//     for (ll i = 0; i < k; ++i)//     {//         left += v[i];//         right += v[v.size() - 1 - i];//     }//     return abs(left - right);// } // ll solve()// {//     // write your code here//     ll n;//     cin >> n;//     vector<ll> ziko(n);//     for (ll i = 0; i < n; ++i)//     {//         cin >> ziko[i];//     }//     sort(all(ziko));//     ll max_abs_diff = LLONG_MIN;//     for (ll k = 1; !(n % k) && (k <= n / 2); ++k)//     {//         max_abs_diff = max(abs_diff(ziko, k), max_abs_diff);//     }//     return max_abs_diff;// } // int main()// {//     Statixia();//     int t = 1;//     cin >> t;//     while (t--)//     {//         cout << solve() << endl;//     }//     return 0;// }/******************************************************************************************************* *//***TRIAL 2 PREFIX SUM (TRUE)**** */// #include <bits/stdc++.h>// using namespace std; // int main() {//     ios::sync_with_stdio(false);//     cin.tie(nullptr); //     int t; //     cin >> t;//     while (t--) {//         int n; //         cin >> n;//         vector<long long> a(n);//         for (int i = 0; i < n; ++i) cin >> a[i]; //         // Prefix sums على الترتيب الأصلي (بدون sort)//         vector<long long> pref(n + 1, 0);//         for (int i = 0; i < n; ++i) pref[i + 1] = pref[i] + a[i]; //         // احسب القواسم//         vector<int> divs;//         for (int d = 1; 1LL * d * d <= n; ++d) {//             if (n % d == 0) {//                 divs.push_back(d);//                 if (1LL * d * d != n) divs.push_back(n / d);//             }//         } //         long long ans = 0;//         for (int k : divs) {//             long long mn = LLONG_MAX, mx = LLONG_MIN;//             for (int i = k; i <= n; i += k) {//                 long long s = pref[i] - pref[i - k]; // مجموع بلوك متتالي طوله k//                 mn = min(mn, s);//                 mx = max(mx, s);//             }//             ans = max(ans, mx - mn);//         } //         cout << ans << "\n";//     }//     return 0;// }/***********TRIAL 3******** */ #include <bits/stdc++.h>using namespace std; int main() {    ios::sync_with_stdio(false);    cin.tie(nullptr);     int t;     cin >> t;    while (t--) {        int n;         cin >> n;        vector<long long> a(n);        for (int i = 0; i < n; ++i) cin >> a[i];         // استخرج القواسم        vector<int> divs;        for (int d = 1; d * d <= n; ++d) {            if (!(n % d))             {                divs.push_back(d);                if (n / d != d) divs.push_back(n / d);            }        }         long long ans = 0;        for (int k : divs) {            long long mn = LLONG_MAX, mx = LLONG_MIN;            long long s = 0;            int cnt = 0;            for (int i = 0; i < n; ++i) {                s += a[i];                if (++cnt == k) {                    mn = min(mn, s);                    mx = max(mx, s);                    s = 0;                    cnt = 0;                }            }            // بما إن k يقسم n، لازم cnt يبقى صفر هنا            ans = max(ans, mx - mn);        }         cout << ans << "\n";    }    return 0;}